{"version":3,"file":"static/js/370.87b70f73.chunk.js","mappings":"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","sources":["utils/addSpaceForAmount.js","utils/comparators.js","webpack://react-homework-template/./src/components/NavBar/NavBar.module.css?b2e4","components/NavBar/NavBar.jsx","components/TransactionsForm/TransactionFormSelect.styled.js","webpack://react-homework-template/./src/components/TransactionsForm/TransactionsForm.module.css?f2f0","components/TransactionsForm/TransactionsForm.jsx","webpack://react-homework-template/./src/components/TransactionsModal/TransactionsModal.module.css?f8d6","components/TransactionsModal/TransactionsModal.jsx","webpack://react-homework-template/./src/components/TransactionsSummary/TransactionsSummary.module.css?1a5b","components/TransactionsSummary/TransactionsSummary.jsx","webpack://react-homework-template/./src/components/TransactionsTable/TransactionsTable.module.css?4613","components/TransactionsTable/TransactionsTable.jsx","webpack://react-homework-template/./src/components/Transactions/Transactions.module.css?ffbb","components/Transactions/Transactions.jsx","webpack://react-homework-template/./src/views/TransactionsView/TransactionsView.module.css?ddb9","views/TransactionsView/TransactionsView.jsx"],"sourcesContent":["export default function addSpaceForAmount(amount) {\n  const floatNum = amount.toFixed(2);\n  const parts = floatNum.toString().split('.');\n  const integerReverse = parts[0].split('').reverse();\n\n  const newString = integerReverse\n    .map((char, index) => {\n      if ((index + 1) % 3 === 0) {\n        return ` ${char}`;\n      }\n      return char;\n    })\n    .reverse()\n    .join('');\n\n  return `${newString}.${parts[1]}`;\n}\n","export const objectEntriesComparatorDesc = (arr1, arr2) => arr2[1] - arr1[1];\nexport const transactionDateComparatorDesc = (t1, t2) =>\n  new Date(t2.date) - new Date(t1.date);\n","// extracted by mini-css-extract-plugin\nexport default {\"navWrap\":\"NavBar_navWrap__wxWii\",\"navList\":\"NavBar_navList__9xlrX\",\"navListItem\":\"NavBar_navListItem__MUXIk\",\"link\":\"NavBar_link__u2LLj\",\"linkActive\":\"NavBar_linkActive__uiQ10 NavBar_link__u2LLj NavBar_link__u2LLj\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { MODES } from 'utils/transactionConstants';\nimport s from './NavBar.module.css';\n\nconst NavBar = ({ mode, setMode }) => {\n  return (\n    <div className={s.container}>\n      <nav className={s.navWrap}>\n        <ul className={s.navList}>\n          <li className={s.navListItem}>\n            <button\n              aria-label=\"Expense\"\n              type=\"button\"\n              className={mode === MODES.expenseMode ? s.linkActive : s.link}\n              onClick={() => setMode(MODES.expenseMode)}\n            >\n              expenses\n            </button>\n          </li>\n          <li className={s.navListItem}>\n            <button\n              aria-label=\"Income\"\n              type=\"button\"\n              className={mode === MODES.incomeMode ? s.linkActive : s.link}\n              onClick={() => setMode(MODES.incomeMode)}\n            >\n              income\n            </button>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nexport default NavBar;\n\nNavBar.propTypes = {\n  mode: PropTypes.string.isRequired,\n  setMode: PropTypes.func.isRequired,\n};\n","export const customStyles = {\n  menu: (provided, state) => ({\n    ...provided,\n    width: state.selectProps.width,\n    borderBottom: '1px dotted pink',\n    padding: 5,\n  }),\n\n  control: (_, { selectProps: { width } }) => ({\n    display: 'flex',\n    height: '44px',\n    fontSize: '12px',\n    lineHeight: '14px',\n    paddingLeft: '19px',\n    color: 'var(--general-text-color)',\n  }),\n\n  placeholder: defaultStyles => {\n    return {\n      ...defaultStyles,\n      color: 'var(--trans-form-input-placeholder-color)',\n      margin: 0,\n    };\n  },\n  indicatorSeparator: styles => ({ display: 'none' }),\n\n  singleValue: (provided, state) => {\n    const opacity = state.isDisabled ? 0.5 : 1;\n    const transition = 'opacity 300ms';\n\n    return { ...provided, opacity, transition };\n  },\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"TransactionsForm_wrap__ldMyx\",\"wrapInput\":\"TransactionsForm_wrapInput__Fh+hz\",\"description\":\"TransactionsForm_description__PEkHv\",\"select\":\"TransactionsForm_select__BN-3w\",\"inputCountWrapper\":\"TransactionsForm_inputCountWrapper__jJJp-\",\"calculatorIcon\":\"TransactionsForm_calculatorIcon__4Ga47\",\"inputCount\":\"TransactionsForm_inputCount__9J1gJ\",\"dateWrapper\":\"TransactionsForm_dateWrapper__KhZR5\",\"calendarIcon\":\"TransactionsForm_calendarIcon__lzAsM\",\"datePicker\":\"TransactionsForm_datePicker__BBUEV\",\"btnInput\":\"TransactionsForm_btnInput__5-4aW\",\"btnClear\":\"TransactionsForm_btnClear__J7qO+\",\"buttonWrap\":\"TransactionsForm_buttonWrap__hozZS\",\"inputWrap\":\"TransactionsForm_inputWrap__EdsI9\"};","import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport moment from 'moment';\nimport { toast } from 'react-toastify';\n\nimport {\n  getExpenseCategoriesQuery,\n  getIncomeCategoriesQuery,\n} from 'service/kapustaAPI';\nimport { MODES } from 'utils/transactionConstants';\nimport Sprite from '../../images/sprite.svg';\nimport { customStyles } from './TransactionFormSelect.styled';\nimport s from './TransactionsForm.module.css';\nimport { authOperations } from 'redux/auth/auth-operations';\nimport { useDispatch } from 'react-redux';\n\nconst TransactionsForm = ({ mode, setIsLoading, closeModal = () => 7 }) => {\n  const [date, setDate] = useState(moment(new Date()).format('YYYY-MM-DD'));\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n  const [amount, setAmount] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setDate(moment(new Date()).format('YYYY-MM-DD'));\n    setDescription('');\n    setCategory('');\n    setAmount('');\n    if (mode === MODES.expenseMode) {\n      getExpenseCategoriesQuery()\n        .then(({ data }) => setCategories(data))\n        .catch(err => toast.error(err.message));\n    }\n    if (mode === MODES.incomeMode) {\n      getIncomeCategoriesQuery()\n        .then(({ data }) => setCategories(data))\n        .catch(err => toast.error(err.message));\n    }\n  }, [mode]);\n\n  const arrKeys = ['value', 'label'];\n\n  const arr = [];\n  function selectOptions() {\n    for (let i = 0; i < categories.length; i++) {\n      let customObject = {\n        [arrKeys[0]]: categories[i],\n        [arrKeys[1]]: categories[i],\n      };\n\n      arr.push(customObject);\n    }\n    return arr;\n  }\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'date':\n        setDate(value);\n        break;\n      case 'description':\n        setDescription(value);\n        break;\n      case 'amount':\n        setAmount(Number(value));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (description.trim().length === 0) {\n      toast.warning('Please fill in all fields');\n      return;\n    }\n\n    const transactionsList = {\n      description: description,\n      date: date,\n      category: category.value,\n      amount: amount,\n    };\n\n    closeModal();\n\n    if (mode === MODES.expenseMode) {\n      if (\n        !transactionsList.category ||\n        !transactionsList.description ||\n        !transactionsList.amount\n      ) {\n        return toast.error('Please fill in all fields');\n      }\n      dispatch(authOperations.sendExpenseTransaction(transactionsList));\n    }\n\n    if (mode === MODES.incomeMode) {\n      if (\n        !transactionsList.category ||\n        !transactionsList.description ||\n        !transactionsList.amount\n      ) {\n        return toast.error('Please fill in all fields');\n      }\n      dispatch(authOperations.sendIncomeTransaction(transactionsList));\n    }\n\n    setDate(moment(new Date()).format('YYYY-MM-DD'));\n    setDescription('');\n    setCategory('');\n    setAmount('');\n  };\n\n  const onHandleResetForm = () => {\n    setDate(moment(new Date()).format('YYYY-MM-DD'));\n    setDescription('');\n    setCategory('');\n    setAmount('');\n  };\n\n  return (\n    <form className={s.wrap} onSubmit={handleSubmit}>\n      <div className={s.wrapInput}>\n        <div className={s.dateWrapper}>\n          <input\n            aria-label=\"Date\"\n            name=\"date\"\n            onChange={handleChange}\n            type=\"date\"\n            className={s.datePicker}\n            value={date}\n          />\n          <svg className={s.calendarIcon} width={20} height={17}>\n            <use href={`${Sprite}#calendar-icon`}></use>\n          </svg>\n        </div>\n\n        <input\n          aria-label=\"Text\"\n          onChange={handleChange}\n          className={s.description}\n          name=\"description\"\n          type=\"text\"\n          placeholder=\"Product description\"\n          value={description}\n        />\n\n        <Select\n          aria-label=\"Select\"\n          placeholder={<div>Product category</div>}\n          width=\"200px\"\n          styles={customStyles}\n          value={category}\n          onChange={setCategory}\n          options={selectOptions()}\n          className={s.select}\n        />\n\n        <div className={s.inputCountWrapper}>\n          <input\n            aria-label=\"Number\"\n            onChange={handleChange}\n            type=\"number\"\n            name=\"amount\"\n            className={s.inputCount}\n            placeholder=\"00.00\"\n            value={amount}\n          />\n          <svg className={s.calculatorIcon} width={18} height={20}>\n            <use href={`${Sprite}#calculator-icon`}></use>\n          </svg>\n        </div>\n      </div>\n      <div className={s.buttonWrap}>\n        <button aria-label=\"Input\" type=\"submit\" className={s.btnInput}>\n          input\n        </button>\n        <button\n          aria-label=\"Clear\"\n          type=\"button\"\n          className={s.btnClear}\n          onClick={onHandleResetForm}\n        >\n          clear\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default TransactionsForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"TransactionsModal_Overlay__Tvp+e\",\"Modal\":\"TransactionsModal_Modal__pkVXA\"};","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport s from './TransactionsModal.module.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst TransactionsModal = ({ onClose, children }) => {\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n  return createPortal(\n    <div className={s.Overlay} onClick={handleBackdropClick}>\n      <div className={s.Modal}>{children}</div>\n    </div>,\n    modalRoot\n  );\n};\n\nexport default TransactionsModal;\n\nTransactionsModal.propTypes = {\n  onClose: PropTypes.func,\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TransactionsSummary_container__xyW2b\",\"title\":\"TransactionsSummary_title__E0h6f\",\"list\":\"TransactionsSummary_list__NwVvZ\",\"item\":\"TransactionsSummary_item__kLjY+\"};","import React from 'react';\nimport s from './TransactionsSummary.module.css';\nimport { getMonthStats } from 'redux/auth/auth-selectors';\nimport { useSelector } from 'react-redux';\nimport addSpaceForAmount from 'utils/addSpaceForAmount';\n\nconst TransactionsSummary = () => {\n  const monthsStats = useSelector(getMonthStats);\n  const renderSummary = () => {\n    let markupArray = [];\n    for (const key in monthsStats) {\n      markupArray.push({ month: key, amount: monthsStats[key] });\n    }\n    return markupArray;\n  };\n\n  return (\n    <div className={s.container}>\n      <h4 className={s.title}>Summary</h4>\n      <ul className={s.list}>\n        {renderSummary().map(el =>\n          el.amount !== 'N/A' ? (\n            <li key={el.month} className={s.item}>\n              <span>{el.month}</span>\n              <span>{addSpaceForAmount(el.amount)}</span>\n            </li>\n          ) : (\n            ''\n          )\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default TransactionsSummary;\n","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"TransactionsTable_loader__5jykR\",\"table\":\"TransactionsTable_table__xu6ZB\",\"mobileTable\":\"TransactionsTable_mobileTable__0sezV\",\"tBody\":\"TransactionsTable_tBody__j0OZY\",\"description\":\"TransactionsTable_description__f3e4R\",\"descriptionMobile\":\"TransactionsTable_descriptionMobile__E+O5B\",\"descriptionExpense\":\"TransactionsTable_descriptionExpense__uKiIW TransactionsTable_description__f3e4R TransactionsTable_description__f3e4R\",\"descriptionIncome\":\"TransactionsTable_descriptionIncome__yWF-c TransactionsTable_description__f3e4R TransactionsTable_description__f3e4R\",\"message\":\"TransactionsTable_message__4J8Nj\",\"column\":\"TransactionsTable_column__AZCxj TransactionsTable_description__f3e4R\",\"date\":\"TransactionsTable_date__cCA52\",\"category\":\"TransactionsTable_category__GT8zv\",\"tableRow\":\"TransactionsTable_tableRow__AQsRN\",\"lastTD\":\"TransactionsTable_lastTD__2W0RA TransactionsTable_tableTitle__rgbMc\",\"btnDelete\":\"TransactionsTable_btnDelete__++FB1\",\"tableRowMobile\":\"TransactionsTable_tableRowMobile__U83UJ\",\"tableBody\":\"TransactionsTable_tableBody__7wkye\",\"descriptionLast\":\"TransactionsTable_descriptionLast__stjj9 TransactionsTable_description__f3e4R\",\"tableTitle\":\"TransactionsTable_tableTitle__rgbMc\"};","import React from 'react';\nimport moment from 'moment';\nimport { MODES } from 'utils/transactionConstants';\nimport Loader from 'components/Loader';\nimport Sprite from '../../images/sprite.svg';\nimport s from './TransactionsTable.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authOperations } from 'redux/auth/auth-operations';\nimport {\n  getExpenseTransactions,\n  getIncomeTransactions,\n  getIsSendingExpense,\n  getIsSendingIncome,\n  isDeleting,\n  isGettingExpense,\n  isGettingIncome,\n} from 'redux/auth/auth-selectors';\nimport addSpaceForAmount from 'utils/addSpaceForAmount';\nimport { transactionDateComparatorDesc } from 'utils/comparators';\n\nconst TransactionsTable = ({ mode }) => {\n  const isDeletingTransaction = useSelector(isDeleting);\n  const isIncomeLoading = useSelector(isGettingIncome);\n  const isExpenseLoading = useSelector(isGettingExpense);\n  const isSendingIncome = useSelector(getIsSendingIncome);\n  const isSendingExpense = useSelector(getIsSendingExpense);\n\n  const isLoading =\n    isDeletingTransaction ||\n    isIncomeLoading ||\n    isExpenseLoading ||\n    isSendingIncome ||\n    isSendingExpense;\n\n  const dispatch = useDispatch();\n\n  const incomeTransactions = useSelector(getIncomeTransactions);\n  const expenseTransactions = useSelector(getExpenseTransactions);\n  const currentTransactions =\n    mode === MODES.expenseMode ? expenseTransactions : incomeTransactions;\n\n  const sortedTransactions = [...currentTransactions].sort(\n    transactionDateComparatorDesc\n  );\n\n  const deleteTransaction = async (transactionId, mode) => {\n    dispatch(authOperations.deleteTransaction({ transactionId, mode }));\n  };\n\n  return (\n    <div>\n      <table className={s.table}>\n        <thead className={s.tableHead}>\n          <tr className={s.tableRow}>\n            <th className={s.tableTitle}>Date</th>\n            <th className={s.tableTitle}>Description</th>\n            <th className={s.tableTitle}>Category</th>\n            <th className={s.tableTitle}>Sum</th>\n            <th className={s.lastTD}></th>\n          </tr>\n        </thead>\n        <tbody className={s.tableBody}>\n          {isLoading ? (\n            <tr>\n              <td className={s.loader}>\n                <Loader />\n              </td>\n            </tr>\n          ) : sortedTransactions?.length > 0 ? (\n            sortedTransactions.map(el => (\n              <tr key={el._id} className={s.tableRow}>\n                <td className={s.description}>\n                  {moment(el.date).format('DD.MM.YYYY')}\n                </td>\n                <td className={s.description}>{el.description}</td>\n                <td className={s.description}>{el.category}</td>\n                {mode === MODES.expenseMode ? (\n                  <td className={s.descriptionExpense}>\n                    -{addSpaceForAmount(el.amount)} грн.\n                  </td>\n                ) : (\n                  <td className={s.descriptionIncome}>\n                    {addSpaceForAmount(el.amount)} грн.\n                  </td>\n                )}\n                <td className={s.descriptionLast}>\n                  <button\n                    aria-label=\"Delete\"\n                    className={s.btnDelete}\n                    onClick={() => deleteTransaction(el._id, mode)}\n                  >\n                    <svg className={s.calendarIcon} width={18} height={18}>\n                      <use href={`${Sprite}#delete-icon`}></use>\n                    </svg>\n                  </button>\n                </td>\n              </tr>\n            ))\n          ) : (\n            <tr className={s.tableRowMobile}>\n              <td>\n                <p className={s.message}>You can add your transactions</p>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n\n      <div className={s.tableMobileWrap}>\n        <table className={s.mobileTable}>\n          <tbody className={s.tBody}>\n            {isLoading ? (\n              <tr>\n                <td className={s.loader}>\n                  <Loader />\n                </td>\n              </tr>\n            ) : sortedTransactions?.length > 0 ? (\n              sortedTransactions.map(el => (\n                <tr key={el._id} className={s.tableRow}>\n                  <td className={s.column}>\n                    <span className={s.descriptionMobile}>\n                      {el.description}\n                    </span>\n                    <span className={s.date}>{el.date}</span>\n                  </td>\n                  <td className={s.category}>{el.category}</td>\n                  {mode === MODES.expenseMode ? (\n                    <td className={s.descriptionExpense}>\n                      - {addSpaceForAmount(el.amount)} грн.\n                    </td>\n                  ) : (\n                    <td className={s.descriptionIncome}>\n                      {addSpaceForAmount(el.amount)} грн.\n                    </td>\n                  )}\n                  <td className={s.lastTD}>\n                    <button\n                      aria-label=\"Delete\"\n                      className={s.btnDelete}\n                      onClick={() => deleteTransaction(el._id, mode)}\n                    >\n                      <svg className={s.calendarIcon} width={18} height={18}>\n                        <use href={`${Sprite}#delete-icon`}></use>\n                      </svg>\n                    </button>\n                  </td>\n                </tr>\n              ))\n            ) : (\n              <tr className={s.message}>\n                <td>\n                  <p>You can add your transactions</p>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionsTable;\n","// extracted by mini-css-extract-plugin\nexport default {\"relativeContainer\":\"Transactions_relativeContainer__NAIaJ\",\"formWrap\":\"Transactions_formWrap__95B3I\",\"summaryWrap\":\"Transactions_summaryWrap__Ho8KI\",\"buttonModal\":\"Transactions_buttonModal__OC-hu\",\"buttonClose\":\"Transactions_buttonClose__8UP1H\",\"container\":\"Transactions_container__jPzDw\",\"transactionsContainer\":\"Transactions_transactionsContainer__3OkA8\"};","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport TransactionsForm from 'components/TransactionsForm';\nimport TransactionsModal from 'components/TransactionsModal';\nimport TransactionsSummary from 'components/TransactionsSummary';\nimport TransactionsTable from 'components/TransactionsTable';\n\nimport { MODES } from 'utils/transactionConstants';\nimport { getUserData } from 'redux/auth/auth-selectors';\nimport { authOperations } from 'redux/auth/auth-operations';\nimport Sprite from '../../images/sprite.svg';\nimport s from './Transactions.module.css';\n\nconst Transactions = ({ mode }) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const userData = useSelector(getUserData);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (mode === MODES.expenseMode) {\n      dispatch(authOperations.getExpenseTransactions());\n    }\n    if (mode === MODES.incomeMode) {\n      dispatch(authOperations.getIncomeTransactions());\n    }\n  }, [dispatch, mode]);\n\n  const onButtonModalClick = () => {\n    setIsLoading(false);\n    setModalOpen(!modalOpen);\n  };\n\n  return (\n    <div className={s.relativeContainer}>\n      <div className={s.container}>\n        <div className={s.formWrap}>\n          <TransactionsForm\n            mode={mode}\n            setIsLoading={setIsLoading}\n            modalOpen={modalOpen}\n            userData={userData}\n          />\n        </div>\n        <div className={s.transactionsContainer}>\n          <div className={s.formTableWrap}>\n            <TransactionsTable\n              mode={mode}\n              setIsLoading={setIsLoading}\n              isLoading={isLoading}\n              userData={userData}\n            />\n          </div>\n        </div>\n\n        {!modalOpen && (\n          <button\n            aria-label=\"Open modal\"\n            type=\"button\"\n            onClick={onButtonModalClick}\n            className={s.buttonModal}\n          >\n            +\n          </button>\n        )}\n      </div>\n      {modalOpen && (\n        <TransactionsModal onClose={onButtonModalClick}>\n          <button\n            aria-label=\"Close\"\n            type=\"button\"\n            onClick={onButtonModalClick}\n            className={s.buttonClose}\n          >\n            <svg width={24} height={24}>\n              <use href={`${Sprite}#arrow-to-main-icon`}></use>\n            </svg>\n          </button>\n          <TransactionsForm\n            modalOpen={modalOpen}\n            userData={userData}\n            mode={mode}\n            closeModal={onButtonModalClick}\n            setIsLoading={setIsLoading}\n          />\n        </TransactionsModal>\n      )}\n      <div className={s.summaryWrap}>\n        <TransactionsSummary />\n      </div>\n    </div>\n  );\n};\n\nexport default Transactions;\n","// extracted by mini-css-extract-plugin\nexport default {\"transactionsWrap\":\"TransactionsView_transactionsWrap__bJW0D\",\"fon\":\"TransactionsView_fon__KCwBm\",\"img\":\"TransactionsView_img__A9FYm\"};","import { useState } from 'react';\nimport { MODES } from 'utils/transactionConstants';\nimport NavBar from 'components/NavBar';\nimport Transactions from 'components/Transactions';\nimport s from './TransactionsView.module.css';\n\nconst TransactionsView = () => {\n  const [mode, setMode] = useState(MODES.expenseMode);\n\n  return (\n    <>\n      <div className={s.fon}></div>\n      <div className={s.img}></div>\n      <div className={s.transactionsWrap}>\n        <NavBar setMode={setMode} mode={mode} />\n        <Transactions mode={mode} />\n      </div>\n    </>\n  );\n};\n\nexport default TransactionsView;\n"],"names":["addSpaceForAmount","amount","parts","toFixed","toString","split","newString","reverse","map","char","index","join","objectEntriesComparatorDesc","arr1","arr2","transactionDateComparatorDesc","t1","t2","Date","date","mode","setMode","className","s","type","MODES","onClick","customStyles","menu","provided","state","width","selectProps","borderBottom","padding","control","_","display","height","fontSize","lineHeight","paddingLeft","color","placeholder","defaultStyles","margin","indicatorSeparator","styles","singleValue","opacity","isDisabled","transition","setIsLoading","closeModal","useState","moment","format","setDate","description","setDescription","category","setCategory","setAmount","categories","setCategories","dispatch","useDispatch","useEffect","getExpenseCategoriesQuery","then","data","catch","err","toast","message","getIncomeCategoriesQuery","arrKeys","arr","handleChange","target","name","value","Number","onSubmit","e","preventDefault","trim","length","transactionsList","authOperations","onChange","href","Sprite","options","i","customObject","push","selectOptions","modalRoot","document","querySelector","onClose","children","handleKeyDown","code","window","addEventListener","removeEventListener","createPortal","currentTarget","monthsStats","useSelector","getMonthStats","markupArray","key","month","renderSummary","el","isDeletingTransaction","isDeleting","isIncomeLoading","isGettingIncome","isExpenseLoading","isGettingExpense","isSendingIncome","getIsSendingIncome","isSendingExpense","getIsSendingExpense","isLoading","incomeTransactions","getIncomeTransactions","expenseTransactions","getExpenseTransactions","currentTransactions","sortedTransactions","sort","deleteTransaction","transactionId","Loader","_id","modalOpen","setModalOpen","userData","getUserData","onButtonModalClick"],"sourceRoot":""}